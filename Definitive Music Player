<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Definitive Music Visualizer & Player</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/addons/p5.sound.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gif.js/0.2.0/gif.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; overflow: hidden; background-color: #0c0a09; }
        #p5-canvas-container { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 1; }
        #drag-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 9999; background-color: rgba(79, 70, 229, 0.8); display: none; justify-content: center; align-items: center; pointer-events: none; }
        #controls-container { position: fixed; top: 0; left: 0; height: 100%; z-index: 10; transition: transform 0.3s ease-in-out; transform: translateX(0); }
        #controls-container.collapsed { transform: translateX(-100%); }
        .control-panel { background-color: rgba(10, 10, 12, 0.85); backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px); border-right: 1px solid rgba(255, 255, 255, 0.1); }
        #toggle-button { position: absolute; left: 100%; top: 50%; transform: translateY(-50%); z-index: 5; background-color: rgba(10, 10, 12, 0.85); backdrop-filter: blur(12px); border-radius: 0 0.5rem 0.5rem 0; border: 1px solid rgba(255, 255, 255, 0.1); border-left: none; }
        .control-panel::-webkit-scrollbar { width: 6px; }
        .control-panel::-webkit-scrollbar-track { background: transparent; }
        .control-panel::-webkit-scrollbar-thumb { background: #4f46e5; border-radius: 3px; }
        .recording-indicator { position: fixed; top: 20px; right: 20px; z-index: 20; display: none; align-items: center; gap: 8px; background-color: #dc2626; padding: 8px 16px; border-radius: 8px; font-weight: 600; }
        .recording-indicator .dot { width: 12px; height: 12px; background-color: white; border-radius: 50%; animation: pulse 1.5s infinite; }
        @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.3; } 100% { opacity: 1; } }
        input[type="range"].progress-bar { -webkit-appearance: none; appearance: none; width: 100%; height: 6px; background: rgba(255, 255, 255, 0.2); border-radius: 3px; outline: none; cursor: pointer; }
        input[type="range"].progress-bar::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 16px; height: 16px; background: #ffffff; border-radius: 50%; border: 2px solid #4f46e5; }
        .playlist-item { transition: background-color 0.2s; }
        .playlist-item.playing { background-color: #4f46e5; color: white; }
        .custom-select { position: relative; }
        .custom-select-trigger { display: flex; align-items: center; justify-content: space-between; padding: 0.5rem; background-color: #1f2937; border: 1px solid #4b5563; border-radius: 0.5rem; cursor: pointer; }
        .custom-options { position: absolute; display: none; top: 100%; left: 0; right: 0; background-color: #1f2937; border: 1px solid #4b5563; border-radius: 0.5rem; z-index: 20; max-height: 200px; overflow-y: auto; }
        .custom-option { display: flex; align-items: center; gap: 10px; padding: 0.5rem; cursor: pointer; }
        .custom-option:hover, .custom-option.selected { background-color: #4f46e5; }
        .viz-preview { width: 24px; height: 24px; flex-shrink: 0; }
        #toast-notification { position: fixed; top: 20px; left: 50%; transform: translateX(-50%); background-color: rgba(10, 10, 12, 0.9); backdrop-filter: blur(10px); padding: 12px 24px; border-radius: 8px; z-index: 100; opacity: 0; transition: opacity 0.5s, top 0.5s; pointer-events: none; }
        #toast-notification.show { top: 40px; opacity: 1; }
    </style>
</head>
<body class="text-gray-200">
    <div id="p5-canvas-container"></div>
    <div id="drag-overlay"><h1 class="text-4xl font-bold text-white">Drop audio files here</h1></div>
    <div id="toast-notification"></div>
    <div class="recording-indicator" id="recIndicator"><div class="dot"></div><span>REC</span></div>

    <div id="controls-container">
        <div class="control-panel w-80 h-full p-4 flex flex-col">
            <div class="flex justify-between items-center flex-shrink-0">
                <h1 class="text-2xl font-bold text-white">Visualizer Pro</h1>
                <button id="fullscreenBtn" title="Fullscreen" class="p-2 text-gray-400 hover:text-white transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"/></svg>
                </button>
            </div>
            
            <div class="space-y-5 mt-4 overflow-y-auto flex-grow pr-2">
                <div class="space-y-3">
                    <h2 class="font-semibold text-gray-400">Audio Player</h2>
                    <div class="flex space-x-2">
                        <button id="micBtn" class="flex-1 bg-indigo-700 hover:bg-indigo-600 transition-colors p-2 rounded-lg font-semibold shadow-md flex items-center justify-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z"/><path d="M19 10v2a7 7 0 0 1-14 0v-2"/><line x1="12" x2="12" y1="19" y2="22"/></svg>
                            Mic
                        </button>
                        <button onclick="document.getElementById('audioFile').click();" class="flex-1 bg-gray-700 hover:bg-gray-600 transition-colors p-2 rounded-lg font-semibold shadow-md flex items-center justify-center gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" x2="12" y1="3" y2="15"/></svg>
                            Upload
                        </button>
                        <input type="file" id="audioFile" accept="audio/*" class="hidden" multiple>
                    </div>
                    <div id="player-controls" class="space-y-2 hidden">
                         <div class="flex items-center gap-2">
                            <button id="prevBtn" class="p-2 text-gray-300 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M6 6h2v12H6zm3.5 6 8.5 6V6z"/></svg></button>
                            <button id="playPauseBtn" class="p-2 bg-indigo-600 rounded-full text-white"></button>
                            <button id="nextBtn" class="p-2 text-gray-300 hover:text-white"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/></svg></button>
                        </div>
                        <input type="range" id="progress-bar" class="progress-bar" value="0" step="1">
                        <div class="flex justify-between text-xs text-gray-400">
                            <span id="currentTime">0:00</span>
                            <span id="totalDuration">0:00</span>
                        </div>
                    </div>
                    <p id="status" class="text-xs text-gray-500 h-4 truncate">Status: Idle. Drop files to play.</p>
                </div>

                <div id="playlist-container" class="space-y-2 hidden">
                    <h2 class="font-semibold text-gray-400">Playlist</h2>
                    <div id="playlist-box" class="max-h-32 overflow-y-auto space-y-1 pr-1"></div>
                </div>

                <div class="space-y-2">
                    <h2 class="font-semibold text-gray-400">Visualizer Style</h2>
                    <div id="viz-select-container" class="custom-select"></div>
                </div>

                <div class="space-y-2">
                    <h2 class="font-semibold text-gray-400">Color Palette</h2>
                     <select id="palette" class="w-full bg-gray-800 border border-gray-600 rounded-lg p-2 focus:outline-none focus:ring-2 focus:ring-indigo-500"></select>
                </div>

                <div class="space-y-3">
                    <h2 class="font-semibold text-gray-400">Effects &amp; Controls</h2>
                    <div class="flex items-center justify-between"><label for="webglToggle">3D Mode</label><input type="checkbox" id="webglToggle" class="toggle-checkbox"></div>
                    <div class="flex items-center justify-between"><label for="starfieldToggle">Starfield BG</label><input type="checkbox" id="starfieldToggle" class="toggle-checkbox" checked></div>
                    <div><label for="sensitivity" class="text-sm">Sensitivity</label><input type="range" id="sensitivity" min="0.1" max="2.0" value="1.0" step="0.1" class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"></div>
                    <div class="flex items-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/><path d="M15.54 8.46a5 5 0 0 1 0 7.07"/></svg><input type="range" id="volume-slider" class="w-full h-1.5 bg-gray-700 rounded-lg" min="0" max="1" value="1" step="0.01"></div>
                    <p id="midiStatus" class="text-xs text-gray-500 h-4">MIDI: Not connected</p>
                </div>
            </div>
            
            <div class="space-y-2 flex-shrink-0 pt-4 border-t border-gray-700"><h2 class="font-semibold text-gray-400">Capture</h2><button id="recordBtn" class="w-full bg-red-600 hover:bg-red-500 disabled:bg-red-800 disabled:cursor-not-allowed transition-colors p-2 rounded-lg font-semibold shadow-md flex items-center justify-center gap-2"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><circle cx="12" cy="12" r="4"/></svg>Record GIF (10s)</button><p id="recordStatus" class="text-xs text-gray-500 h-4 text-center"></p></div>
        </div>
        <button id="toggle-button" class="p-2"><svg id="toggle-icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg></button>
    </div>
    
    <style>.toggle-checkbox{appearance:none;width:40px;height:22px;background-color:#374151;border-radius:9999px;position:relative;cursor:pointer;transition:background-color .2s}.toggle-checkbox:checked{background-color:#4f46e5}.toggle-checkbox::before{content:'';position:absolute;width:16px;height:16px;background-color:#fff;border-radius:50%;top:3px;left:3px;transition:transform .2s}.toggle-checkbox:checked::before{transform:translateX(18px)}</style>

    <script>
        // --- Global Variables & Utility Functions ---
        let myp5;
        const playIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M8 5v14l11-7z"/></svg>`;
        const pauseIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/></svg>`;

        function formatTime(seconds) { const m=Math.floor(seconds/60),s=Math.floor(seconds%60); return `${m}:${s<10?'0':''}${s}`; }
        function showToast(message) { const t=document.getElementById('toast-notification'); t.textContent=message; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'), 3000); }
        function updatePlayButton() { if(myp5) document.getElementById('playPauseBtn').innerHTML = myp5.state.isPlaying ? pauseIcon : playIcon; }
        function updatePlayerUI() { if (!myp5 || !myp5.soundFile || !myp5.soundFile.isLoaded()) return; const p=document.getElementById('progress-bar'),c=document.getElementById('currentTime'),t=document.getElementById('totalDuration'),d=myp5.soundFile.duration(),u=myp5.soundFile.currentTime();p.max=d;p.value=u;c.textContent=formatTime(u);t.textContent=formatTime(d);updatePlayButton(); }
        function updatePlaylistUI() { const b=document.getElementById('playlist-box'),c=document.getElementById('playlist-container');b.innerHTML='';if(myp5 && myp5.state.playlist.length>0){c.classList.remove('hidden');myp5.state.playlist.forEach((t,i)=>{const e=document.createElement('div');e.textContent=`${i+1}. ${t.name.substring(0,30)}...`;e.className='playlist-item p-2 rounded-md cursor-pointer text-sm';if(i===myp5.state.currentTrackIndex)e.classList.add('playing');e.onclick=()=>myp5.playTrack(i);b.appendChild(e)})}else c.classList.add('hidden')}
        
        // --- p5.js Sketch Definition ---
        const sketch = (p) => {
            let fft, amplitude;
            
            p.state = {
                source: null, vizType: 'aurora', palette: 'neon', sensitivity: 1.0, starfield: true,
                isRecording: false, isPlaying: false, webglMode: false,
                playlist: [], currentTrackIndex: 0,
            };
            p.soundFile = null;
            p.mic = null;

            const palettes = {
                neon: ['#ff00ff', '#00ffff', '#ffff00', '#ff0099'], ocean: ['#00f2ff', '#00a6ff', '#005fff', '#002aff'],
                sunset: ['#ff5f6d', '#ffc371', '#ff9a8b', '#ff6b6b'], forest: ['#adff2f', '#32cd32', '#008000', '#228b22'],
                lava: ['#ff4800', '#ff7400', '#ffb300', '#ffea00'], monochrome: ['#ffffff', '#cccccc', '#999999', '#666666']
            };

            let particles = [], stars = [], stringParticles = [], auroraPoints = [];
            let sunburstRays = 60;

            p.setup = () => {
                const container = document.getElementById('p5-canvas-container');
                const renderer = p.state.webglMode ? p.WEBGL : p.P2D;
                const cnv = p.createCanvas(container.offsetWidth, container.offsetHeight, renderer);
                cnv.parent('p5-canvas-container');
                
                fft = new p5.FFT(0.8, 512);
                amplitude = new p5.Amplitude();
                if (!p.state.webglMode) p.noStroke();
                
                for (let i = 0; i < 200; i++) stars.push({ x: p.random(-p.width, p.width), y: p.random(-p.height, p.height), z: p.random(p.width) });
                for (let i = 0; i < 50; i++) stringParticles.push(new StringParticle(p));
                for (let i=0; i<100; i++) auroraPoints.push({x: p.random(p.width), y: p.random(p.height/2), speed: p.random(0.1, 0.5), offset: p.random(1000)});
                
                p.getfft = () => fft;
                p.getamplitude = () => amplitude;
            };

            p.draw = () => {
                const is3D = p.state.webglMode;
                let level = p.state.source ? amplitude.getLevel() : 0;
                
                if (is3D) { p.orbitControl(2, 2, 0.1); p.background(12, 10, 9); } 
                else { drawGradientBackground(level); }
                
                if (p.state.starfield) drawStarfield(level);
                
                if (p.state.source) {
                    let spectrum = fft.analyze();
                    const vizData = { level, spectrum, bass: fft.getEnergy("bass"), mid: fft.getEnergy("mid"), treble: fft.getEnergy("treble"), wave: fft.waveform() };
                    
                    const vizRequires3D = ['cubes', 'metropolis', 'particleSphere'].includes(p.state.vizType);
                    if (vizRequires3D && !is3D) {
                        p.fill(255); p.textAlign(p.CENTER); p.text("Enable 3D Mode for this visualizer", p.width/2, p.height/2);
                    } else {
                        switch (p.state.vizType) {
                            case 'aurora': drawAurora(vizData); break;
                            case 'metropolis': drawMetropolis(vizData); break;
                            case 'waveRings': drawWaveRings(vizData); break;
                            case 'particleGrid': drawParticleGrid(vizData); break;
                            case 'cubes': drawFloatingCubes(vizData); break;
                            case 'particles': drawParticles(vizData); break;
                            case 'landscape': drawLandscape(vizData); break;
                            case 'stringTheory': drawStringTheory(vizData); break;
                            case 'kaleidoscope': drawKaleidoscope(vizData); break;
                            case 'vortex': drawVortex(vizData); break;
                            case 'sunburst': drawSunburst(vizData); break;
                            case 'particleSphere': drawParticleSphere(vizData); break;
                        }
                    }
                } else if (!is3D) { drawIdleAnimation(); }
            };

            p.windowResized = () => { p.resizeCanvas(document.getElementById('p5-canvas-container').offsetWidth, document.getElementById('p5-canvas-container').offsetHeight); };
            const getColor = (index) => p.color(palettes[p.state.palette][index % palettes[p.state.palette].length]);

            function drawGradientBackground(level) { let c1 = getColor(0); let c2 = p.color(12, 10, 9); c1.setAlpha(150 + level * 105); for (let i = 0; i <= p.height; i++) { let inter = p.map(i, 0, p.height, 0, 1); let c = p.lerpColor(c1, c2, inter); p.stroke(c); p.line(0, i, p.width, i); } p.noStroke(); }
            function drawStarfield(level) { const is3D = p.state.webglMode; if (is3D) p.translate(-p.width/2, -p.height/2, -p.width/2); stars.forEach(star => { p.fill(255, 180); p.noStroke(); if (is3D) { p.push(); p.translate(star.x, star.y, star.z); p.sphere(star.size); p.pop(); star.z -= (star.size + level * 2); if (star.z < 1) star.z = p.width; } else { p.ellipse(star.x, star.y, star.size + level * 2); star.x = (star.x - star.size * 0.1 - level + p.width) % p.width; } }); if (is3D) p.translate(p.width/2, p.height/2, p.width/2); }
            function drawAurora({spectrum}) { p.noStroke(); for (let i=0; i<auroraPoints.length; i++) { const ap = auroraPoints[i]; const x = p.noise(ap.offset + p.frameCount * 0.002) * p.width; const y = p.noise(ap.offset + 500 + p.frameCount * 0.001) * p.height * 0.7; const w = p.map(spectrum[i % 256], 0, 255, 10, 300); const h = p.map(spectrum[i % 256], 0, 255, 50, 200); const c = getColor(i % 4); c.setAlpha(p.map(spectrum[i % 256], 0, 255, 10, 60)); p.fill(c); p.ellipse(x, y, w, h); } }
            function drawMetropolis({spectrum}) { p.translate(0, p.height * 0.3, -200); p.rotateX(p.PI/4); const cols = 16, rows = 16, w = p.width / cols, d = p.width / rows; for (let x=0; x<cols; x++) { for (let y=0; y<rows; y++) { p.push(); const h = p.map(spectrum[x*rows+y] || 0, 0, 255, 10, 300); p.translate((x-cols/2)*w, 0, (y-rows/2)*d); p.fill(getColor((x+y)%4)); p.box(w*0.8, h, d*0.8); p.pop(); } } }
            function drawWaveRings({ wave }) { p.translate(p.width/2, p.height/2); p.noFill(); p.strokeWeight(2); for(let i=0; i<5; i++){ p.stroke(getColor(i)); const d = (p.frameCount * 2 + i * p.height/5) % p.height; p.beginShape(); for(let a=0; a<p.TWO_PI; a+=0.1){ const r = d/2 + wave[Math.floor(p.map(a,0,p.TWO_PI,0,wave.length-1))] * 50; p.vertex(p.cos(a)*r, p.sin(a)*r); } p.endShape(p.CLOSE); } }
            function drawParticleGrid({ spectrum }) { p.translate(p.width/2, p.height/2); const gridSize=16, spacing=20; for(let x=0; x<gridSize; x++){ for(let y=0; y<gridSize; y++){ const i = x * gridSize + y; const size = p.map(spectrum[i], 0, 255, 0, 15); p.fill(getColor(i%4)); p.ellipse((x-gridSize/2)*spacing, (y-gridSize/2)*spacing, size); } } }
            function drawFloatingCubes({ level, bass, treble }) { p.translate(0,0,-200); p.noFill(); p.strokeWeight(1.5); for(let i=0; i<10; i++){ p.push(); const size = 50 + level * 200 + (i%2==0 ? bass/5 : treble/5); p.stroke(getColor(i)); p.rotateX(i*0.5 + p.frameCount * 0.01); p.rotateY(i*0.3 + p.frameCount * 0.01); p.box(size); p.pop(); } }
            function drawParticles({ level }) { p.translate(p.width/2, p.height); for (let i=0; i < p.map(level,0,1,0,10); i++) particles.push(new Particle(p, {color:getColor(p.floor(p.random(4))), vel:p.createVector(p.random(-3,3),p.random(-8,-15))})); for (let i=particles.length-1; i>=0; i--) { particles[i].update(level); particles[i].show(); if (particles[i].isFinished()) particles.splice(i,1); } }
            function drawLandscape({ spectrum }) { p.strokeWeight(2); p.noFill(); for (let z=0; z<10; z++) { p.beginShape(); p.stroke(getColor(z%4)); for (let i=0; i<spectrum.length; i++) { const x=p.map(i,0,spectrum.length,0,p.width); const y=p.height*0.7+p.map(spectrum[i],0,255,-50,50)*(1-z*0.05)-z*20; p.vertex(x,y); } p.endShape(); } }
            function drawStringTheory({ bass }) { for (let i=0; i<stringParticles.length; i++) { stringParticles[i].update(bass); stringParticles[i].show(); for (let j=i+1; j<stringParticles.length; j++) { const d=stringParticles[i].pos.dist(stringParticles[j].pos); if (d<150) { p.stroke(getColor(i%4), p.map(d,0,150,100,0)); p.strokeWeight(1); p.line(stringParticles[i].pos.x,stringParticles[i].pos.y,stringParticles[j].pos.x,stringParticles[j].pos.y); } } } }
            function drawKaleidoscope({ spectrum }) { const sides=6, angle=p.TWO_PI/sides; p.translate(p.width/2,p.height/2); for (let i=0; i<sides; i++) { p.rotate(angle); p.push(); p.scale(i%2===0?1:-1, 1); p.noStroke(); const barWidth=p.width/2/128; for (let j=0; j<128; j++) { let h=p.map(spectrum[j],0,255,0,p.height/4); p.fill(getColor(j%4)); p.rect(j*barWidth,0,barWidth,h); } p.pop(); } }
            function drawVortex({ level }) { p.translate(p.width/2, p.height/2); for (let i=0; i<p.map(level,0,1,0,5); i++) particles.push(new Particle(p, {color:getColor(p.floor(p.random(4))), vel:p5.Vector.random2D().mult(p.random(10)), acc:p.createVector(0,0), lifespan:150})); for (let i=particles.length-1; i>=0; i--) { particles[i].vel.lerp(p.createVector(0,0),0.05); particles[i].update(level); particles[i].show(); if (particles[i].isFinished()) particles.splice(i,1); } }
            function drawSunburst({spectrum}) { p.translate(p.width/2, p.height/2); for(let i=0; i<sunburstRays; i++){ const angle = p.map(i, 0, sunburstRays, 0, p.TWO_PI); const len = p.map(spectrum[i % 256], 0, 255, 50, p.width/2); p.stroke(getColor(i % 4)); p.strokeWeight(2); p.line(0,0, p.cos(angle)*len, p.sin(angle)*len); } }
            function drawParticleSphere({spectrum}) { p.rotateY(p.frameCount * 0.005); const sphereRadius = p.width/4; for(let i=0; i<256; i++){ const phi = p.map(i, 0, 255, 0, p.PI); for(let j=0; j<16; j++){ const theta = p.map(j, 0, 16, 0, p.TWO_PI); const r = sphereRadius + p.map(spectrum[i], 0, 255, 0, 100); const x = r * p.sin(phi) * p.cos(theta); const y = r * p.sin(phi) * p.sin(theta); const z = r * p.cos(phi); p.push(); p.translate(x,y,z); p.fill(getColor(i%4)); p.noStroke(); p.sphere(3); p.pop(); } } }
            function drawIdleAnimation() { p.translate(p.width/2,p.height/2); p.noFill(); p.stroke(255,50); p.strokeWeight(1); for (let i=0; i<10; i++) p.circle(0,0,i*20+p.sin(p.frameCount*0.05+i)*10); }
            class Particle { constructor(p,{pos,vel,acc,lifespan=255,size,color}){this.p=p;this.pos=pos||p.createVector(0,0);this.vel=vel||p.createVector(p.random(-1,1),p.random(-1,1));this.acc=acc||p.createVector(0,0.2);this.lifespan=lifespan;this.size=size||p.random(5,15);this.color=color||p.color(255);} update(level){this.vel.add(this.acc);this.pos.add(this.vel);this.lifespan-=2;if(level>0.5)this.vel.y-=level;} show(){this.p.noStroke();const c=this.color;this.p.fill(c.levels[0],c.levels[1],c.levels[2],this.lifespan);this.p.ellipse(this.pos.x,this.pos.y,this.size);} isFinished(){return this.lifespan<0;} }
            class StringParticle { constructor(p){this.p=p;this.pos=p.createVector(p.random(p.width),p.random(p.height));this.vel=p5.Vector.random2D().mult(p.random(0.5,2));} update(bass){this.pos.add(this.vel);if(this.pos.x<0||this.pos.x>this.p.width)this.vel.x*=-1;if(this.pos.y<0||this.pos.y>this.p.height)this.vel.y*=-1;if(bass>200)this.vel.mult(1.05);else this.vel.mult(0.99);} show(){this.p.fill(255,200);this.p.noStroke();this.p.ellipse(this.pos.x,this.pos.y,3);} }
        };
        
        // --- Main UI Logic & Control Functions ---
        window.addEventListener('DOMContentLoaded', () => {
            const vizOptions = {
                aurora: { name: "Aurora", is3D: false, preview: `<svg viewBox="0 0 100 100"><defs><filter id="g"><feGaussianBlur stdDeviation="8"/></filter><linearGradient id="l" x1="0" x2="0" y1="0" y2="1"><stop offset="0%" stop-color="#ff00ff"/><stop offset="100%" stop-color="#00ffff"/></linearGradient></defs><ellipse cx="50" cy="50" rx="40" ry="20" fill="url(#l)" filter="url(#g)"><animate attributeName="ry" values="20;30;20" dur="2s" repeatCount="indefinite"/></ellipse></svg>` },
                sunburst: { name: "Sunburst", is3D: false, preview: `<svg viewBox="0 0 100 100"><g><line x1="50" y1="50" x2="100" y2="50" stroke="#ff00ff" stroke-width="4"/><animateTransform attributeName="transform" type="rotate" from="0 50 50" to="360 50 50" dur="3s" repeatCount="indefinite" /></g></svg>` },
                particles: { name: "Particle Fountain", is3D: false, preview: `<svg viewBox="0 0 100 100"><circle cx="20" cy="20" r="5" fill="#ff00ff"><animateTransform attributeName="transform" type="translate" values="30 80; 30 0" dur="1s" repeatCount="indefinite"/></circle><circle cx="50" cy="20" r="5" fill="#00ffff"><animateTransform attributeName="transform" type="translate" values="0 80; 0 0" dur="1.2s" repeatCount="indefinite"/></circle></svg>` },
                landscape: { name: "Audio Landscape", is3D: false, preview: `<svg viewBox="0 0 100 100"><path d="M0 80 Q 25 60, 50 80 T 100 80" stroke="#00ffff" fill="none" stroke-width="4"><animate attributeName="d" values="M0 80 Q 25 60, 50 80 T 100 80; M0 80 Q 25 90, 50 70 T 100 80; M0 80 Q 25 60, 50 80 T 100 80" dur="2s" repeatCount="indefinite"/></path></svg>` },
                stringTheory: { name: "String Theory", is3D: false, preview: `<svg viewBox="0 0 100 100"><circle cx="30" cy="30" r="5" fill="#fff"/><circle cx="70" cy="70" r="5" fill="#fff"/><line x1="30" y1="30" x2="70" y2="70" stroke="#fff" stroke-width="2"><animate attributeName="x2" values="70;50;70" dur="2s" repeatCount="indefinite"/></line></svg>` },
                kaleidoscope: { name: "Kaleidoscope", is3D: false, preview: `<svg viewBox="0 0 100 100"><g><path d="M50 50 L 50 0 A 50 50 0 0 1 85.35 25 Z" fill="#ff00ff"/><animateTransform attributeName="transform" type="rotate" from="0 50 50" to="360 50 50" dur="4s" repeatCount="indefinite"/></g></svg>` },
                vortex: { name: "Vortex", is3D: false, preview: `<svg viewBox="0 0 100 100"><circle cx="50" cy="50" r="5" fill="#00ffff"><animateMotion path="M 50,50 C 70,20 30,20 50,50" dur="2s" repeatCount="indefinite"/></circle></svg>` },
                waveRings: { name: "Wave Rings", is3D: false, preview: `<svg viewBox="0 0 100 100"><circle cx="50" cy="50" r="10" stroke="#ff00ff" fill="none" stroke-width="3"><animate attributeName="r" values="10;40" dur="2s" repeatCount="indefinite"/><animate attributeName="opacity" values="1;0" dur="2s" repeatCount="indefinite"/></circle></svg>` },
                particleGrid: { name: "Particle Grid", is3D: false, preview: `<svg viewBox="0 0 100 100"><circle cx="25" cy="25" r="8" fill="#00ffff"><animate attributeName="r" values="8;4;8" dur="1.5s" repeatCount="indefinite"/></circle><circle cx="75" cy="75" r="8" fill="#ff00ff"><animate attributeName="r" values="8;12;8" dur="1.5s" repeatCount="indefinite"/></circle></svg>` },
                particleSphere: { name: "Particle Sphere", is3D: true, preview: `<svg viewBox="0 0 100 100"><circle cx="50" cy="50" r="30" stroke="#fff" stroke-width="2" fill="none"/><circle cx="50" cy="50" r="3" fill="#fff"><animateMotion dur="2s" repeatCount="indefinite" path="M50,20 A30,30 0 1,1 50,80 A30,30 0 1,1 50,20"/></circle></svg>` },
                cubes: { name: "Floating Cubes", is3D: true, preview: `<svg viewBox="0 0 100 100"><rect x="25" y="25" width="50" height="50" stroke="#fff" fill="none" stroke-width="3"><animateTransform attributeName="transform" type="rotate" from="0 50 50" to="360 50 50" dur="3s" repeatCount="indefinite"/></rect></svg>` },
                metropolis: { name: "Metropolis", is3D: true, preview: `<svg viewBox="0 0 100 100"><rect x="20" y="50" width="20" height="50" fill="#ff00ff"><animate attributeName="height" values="50;20;50" dur="1.5s" repeatCount="indefinite"/></rect><rect x="60" y="30" width="20" height="70" fill="#00ffff"><animate attributeName="height" values="70;40;70" dur="1.5s" repeatCount="indefinite"/></rect></svg>` },
            };
            const paletteOptions = { neon: "Neon Nights", ocean: "Ocean Deep", sunset: "Sunset", forest: "Forest", lava: "Lava Lamp", monochrome: "Monochrome" };
            
            const vizSelectContainer = document.getElementById('viz-select-container');
            const trigger = document.createElement('div');
            trigger.className = 'custom-select-trigger';
            const options = document.createElement('div');
            options.className = 'custom-options';
            vizSelectContainer.append(trigger, options);

            function updateVizSelect(selectedValue) {
                const selected = vizOptions[selectedValue];
                trigger.innerHTML = `<div class="viz-preview">${selected.preview}</div><span>${selected.name}</span><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>`;
                options.innerHTML = '';
                for (const [key, val] of Object.entries(vizOptions)) {
                    const optionEl = document.createElement('div');
                    optionEl.className = 'custom-option';
                    if (key === selectedValue) optionEl.classList.add('selected');
                    optionEl.dataset.value = key;
                    optionEl.innerHTML = `<div class="viz-preview">${val.preview}</div><span>${val.name}</span>`;
                    optionEl.addEventListener('click', () => {
                        updateVizSelect(key);
                        options.style.display = 'none';
                        const needs3D = vizOptions[key].is3D;
                        document.getElementById('webglToggle').checked = needs3D;
                        if (myp5.state.webglMode !== needs3D) { myp5.state.webglMode = needs3D; myp5.remove(); myp5 = new p5(sketch); }
                        myp5.state.vizType = key;
                        saveSettings();
                    });
                    options.appendChild(optionEl);
                }
            }
            trigger.addEventListener('click', () => { options.style.display = options.style.display === 'block' ? 'none' : 'block'; });
            
            const paletteSelect = document.getElementById('palette');
            for (const [key, val] of Object.entries(paletteOptions)) { const option = document.createElement('option'); option.value = key; option.textContent = val; paletteSelect.appendChild(option); }

            myp5 = new p5(sketch);

            function stopAllAudio() { if (myp5.soundFile && myp5.soundFile.isPlaying()) myp5.soundFile.stop(); if (myp5.mic && myp5.mic.started) { myp5.mic.stop(); myp5.mic = null; } myp5.state.isPlaying = false; myp5.state.source = null; }
            function playTrack(index) {
                if (index < 0 || index >= myp5.state.playlist.length) return;
                stopAllAudio();
                myp5.state.currentTrackIndex = index;
                myp5.state.source = 'file';
                const track = myp5.state.playlist[index];
                
                myp5.soundFile = new p5.SoundFile(track.url, () => {
                    myp5.getfft().setInput(myp5.soundFile); myp5.getamplitude().setInput(myp5.soundFile);
                    showToast(`Now Playing: ${track.name}`);
                    document.getElementById('status').textContent = `Playing: ${track.name.substring(0,25)}...`;
                    document.getElementById('player-controls').classList.remove('hidden');
                    myp5.soundFile.setVolume(parseFloat(document.getElementById('volume-slider').value));
                    myp5.soundFile.onended(nextTrack);
                    myp5.soundFile.play();
                    myp5.state.isPlaying = true;
                    updatePlaylistUI(); updatePlayButton();
                }, (err) => { console.error(err); document.getElementById('status').textContent = 'Error loading track.'; });
            }
            function togglePlay() { if (!myp5.soundFile || !myp5.soundFile.isLoaded()) return; if (myp5.soundFile.isPlaying()) { myp5.soundFile.pause(); myp5.state.isPlaying = false; } else { myp5.soundFile.play(); myp5.state.isPlaying = true; } updatePlayButton(); }
            function nextTrack() { let i=(myp5.state.currentTrackIndex+1)%myp5.state.playlist.length; playTrack(i); }
            function prevTrack() { let i=(myp5.state.currentTrackIndex-1+myp5.state.playlist.length)%myp5.state.playlist.length; playTrack(i); }
            function startMic() {
                p5.prototype.getAudioContext().resume().then(() => {
                    stopAllAudio();
                    myp5.state.source = 'mic';
                    document.getElementById('player-controls').classList.add('hidden');
                    document.getElementById('playlist-container').classList.add('hidden');
                    myp5.mic = new p5.AudioIn();
                    myp5.mic.start(() => { myp5.getfft().setInput(myp5.mic); myp5.getamplitude().setInput(myp5.mic); document.getElementById('status').textContent = 'Status: Listening to mic...'; },
                               () => { document.getElementById('status').textContent = 'Error: Mic access denied.'; myp5.state.source = null; });
                });
            }
            function handleFiles(files) { stopAllAudio(); const newPlaylist = Array.from(files).filter(f => f.type.startsWith('audio/')).map(f => ({ name: f.name, url: URL.createObjectURL(f) })); if (newPlaylist.length > 0) { myp5.state.playlist = newPlaylist; playTrack(0); } }
            function saveSettings() { const settings = { vizType: myp5.state.vizType, palette: myp5.state.palette, sensitivity: myp5.state.sensitivity, starfield: myp5.state.starfield, webglMode: myp5.state.webglMode, volume: document.getElementById('volume-slider').value }; localStorage.setItem('visualizerSettings', JSON.stringify(settings)); }
            function loadSettings() { const settings = JSON.parse(localStorage.getItem('visualizerSettings')); if (settings) { document.getElementById('palette').value = settings.palette; document.getElementById('sensitivity').value = settings.sensitivity; document.getElementById('starfieldToggle').checked = settings.starfield; document.getElementById('webglToggle').checked = settings.webglMode; document.getElementById('volume-slider').value = settings.volume; updateVizSelect(settings.vizType); myp5.state = { ...myp5.state, ...settings }; if (myp5.state.webglMode) { myp5.remove(); myp5 = new p5(sketch); } } else { updateVizSelect('aurora'); } }

            document.getElementById('micBtn').addEventListener('click', startMic);
            document.getElementById('audioFile').addEventListener('change', (e) => handleFiles(e.target.files));
            window.addEventListener('dragover', (e) => { e.preventDefault(); document.getElementById('drag-overlay').style.display = 'flex'; });
            window.addEventListener('dragleave', () => { document.getElementById('drag-overlay').style.display = 'none'; });
            window.addEventListener('drop', (e) => { e.preventDefault(); document.getElementById('drag-overlay').style.display = 'none'; handleFiles(e.dataTransfer.files); });
            
            document.getElementById('webglToggle').addEventListener('change', (e) => { myp5.state.webglMode = e.target.checked; myp5.remove(); myp5 = new p5(sketch); saveSettings(); });
            document.getElementById('palette').addEventListener('change', (e) => { myp5.state.palette = e.target.value; saveSettings(); });
            document.getElementById('sensitivity').addEventListener('input', (e) => { myp5.state.sensitivity = parseFloat(e.target.value); saveSettings(); });
            document.getElementById('starfieldToggle').addEventListener('change', (e) => { myp5.state.starfield = e.target.checked; saveSettings(); });
            document.getElementById('volume-slider').addEventListener('input', (e) => { if(myp5.soundFile) myp5.soundFile.setVolume(parseFloat(e.target.value)); saveSettings(); });
            
            updatePlayButton();
            document.getElementById('playPauseBtn').addEventListener('click', togglePlay);
            document.getElementById('nextBtn').addEventListener('click', nextTrack);
            document.getElementById('prevBtn').addEventListener('click', prevTrack);
            document.getElementById('progress-bar').addEventListener('input', (e) => myp5.soundFile.jump(parseFloat(e.target.value)));
            document.getElementById('fullscreenBtn').addEventListener('click', () => myp5.fullscreen(!myp5.fullscreen()));
            const c=document.getElementById('controls-container'),t=document.getElementById('toggle-button'),i=document.getElementById('toggle-icon');t.addEventListener('click',()=>{c.classList.toggle('collapsed');i.innerHTML=c.classList.contains('collapsed')?`<polyline points="9 18 15 12 9 6"></polyline>`:`<polyline points="15 18 9 12 15 6"></polyline>`;});
            
            loadSettings();
        });
    </script>
</body>
</html>
